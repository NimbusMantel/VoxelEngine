Voxel Engine Notebook
---------------------

Voxel buffer management on the CPU
- Bitmask for each block of voxel children (8*4*4=128 bytes)
- Storage in binary tree 32-bit array
- Path computation: current level is the least significant bit, on left shift per level
- Binary index in the array: ((path | (1 << level)) - 1) or (path + (2^maxLevel >> (maxLevel-level)))
- Binary index to array index: (index >> 3)
- Binary index to bit index: (index & 7)

- maxLevel=23 -> ~2MB voxel buffer management -> ~1GB CPU voxel buffer, ~1GB GPU voxel buffer -> ~1000m^3 voxel data at its lowest level

Voxel buffer on CPU and GPU are synchronized

Voxel strucuture on the GPU
- 32-bit structure: 1-active, 3-index,
                    4-depth (child 0) / 4-parent (children 1-7),
					8-children, 6-time, (10-unused)
- 32-bit children: 32-pointer (absolute, refer to the block of voxel data (4*4=16 bytes))
- 32-bit material: 8-red, 8-green, 8-blue, 8-beta
- 32-bit lighting: 1-mode,
     mono-lit (0): 6-red, 6-green, 6-blue, 13-luminosity (5-exponent, 8-fraction)
 	   bi-lit (1): 3-dir, 3-redA, 3-greenA, 3-blueA, 5-luminosityA,
		                  3-redB, 3-greenB, 3-blueB, 5-luminosityB

Voxel structure on the CPU
- 32-bit structure: 1-active, 3-index,
                    4-depth (child 0) / 4-parent (children 1-7),
					8-children, 6-position, (10-unused)
- 32-bit children: 32-pointer (absolute, refer to the block of voxel data (4*4=16 bytes))
- 32 bit unused: (32-unused)
- 32 bit unused: (32-unused)

Voxel buffer dynamics
- Loading of voxels in order (root -> recursion on children) by requests from the GPU and CPU
- Unloading by suggestions from the GPU checked by the CPU

GPU loading suggestions
- set children mask but unset first child pointer represent unloaded children
- 7-bit last render timestamp (time - voxel)
- 1-bit search flag
  - update to 0 by childless leaf voxel
  - binary OR recursive parent update
  - binary search from the root for voxels to load or unload
  - reset to 1 at the end of the frame
- memory pressure level calculated by the CPU (default to 127, maximum at 1)
- unused voxels with fallow period >= memory pressure is suggested to the CPU for unloading

CPU unloading checks
- calculation of the current memory pressure via the amount of memory needs to be inserted and how much space is left
- only unloading of voxel data which isn't in very close proximity to the player (but not in full detail) or needed for physics

Voxel visuals on the GPU
- Voxel material colour system
  - "A physically Based Colour Model" by Robert J Oddy, Philip J Willis
  - ratio of particle and medium colour defined by beta value
  - channel values of particle and medium colour compressed into shared bits
    - bit usage determined by beta value (i_par + i_med = 8)
	  0: [0;7]  , 5: [160;207]
	  1: [8;15] , 6: [208;239]
	  2: [16;47], 7: [240;247]
	  3: [48;95], 8: [248;255]
	  4: [96;159]
	- compression: c = (v * beta / i[1]) ^ i/8
	- decompression: v = (c ^ 8/i) * i[1] / beta
- Voxel baked lighting system
  - light colour stores channel ratios (adjusted to range)
  - mono-lit voxels only contain one uniform light source
    - luminosity stores the light strength in 2^EV (exponent decreased by six)
  - bi-lit voxels contain two uniform lights sources
    - dir defines whether the negative (0) or positive (1) axis side is lit by lightA
	- luminosity stores the light strength in EV + 9
  - brightness is calculated as (0.299*r + 0.587*g + 0.114 * b)
  - light is calculated as rgb * 2^EV * 0.125 / brightness(rgb)
  - front and back light is the average of the adjacent light sources
  - back light is weighted with a factor of 1/4
- Bloom rendering
  - seperated calculation of Gaussian blurs using moving weighted averages
  - successive downsampling, blurring and upsampling for bloom
  - weighted average of 90% hdr and 10% bloom

CPU to GPU communication
- 24 bit indices
- header
  - [s] [a] [o, n, sp]* [o, n, ap]*
    - amounts of synchronous and asynchronous instructions
    - instruction codes and numbers of calls of, pointers to synchronous instructions
    - instruction codes and numbers of subcalls of, pointers to asynchronous instructions
- instructions
  - RLD [parent, index, children]*: load children -> pointer(p)
  - ULD [parent]*: unload children -> pointer(p)
  - ADD [parent, children]*: add children -> children(p) (first voxel must be valid)
  - REM [parent, mask]*: remove children -> children(p) (only called for the topmost parent)
  - MOV [fparent, fidx, tparent, tidx]*: move voxel -> children(op), index(v), parent(v), children(np), parent(c)
  - EXP [parent, index]*: expand parent -> pointer(p)
  - MAT [index, material]*: update material -> material(v)
  - LIT [index, light]*: update light -> light(v)

GPU to CPU communication
- 24 bit indices
- header
  - [f] [s] [a] [o, n, ap]* (structure inside the kernel)
    - buffer finished flag
    - buffer size in bytes
  - [a] [o, n, ap]* (structure arriving at the host)
    - amount of asynchronous instructions
    - instruction codes and numbers of subcalls of, pointers to asynchronous instructions
- instructions
  - REQ [parent]*: request children loadign
  - SUG [parent]*: suggest children unloading

Voxel Engine controls
- program
  - ESC: exit fullscreen mode, end the program
  - F: enter and exit fullscreen mode
- camera
  - C: switch between trackball and free camera mode
    - rotate the camera via mouse movement in free mode
    - rotate the camera via mouse dragging in trackball mode
- movement
  - UP: move forward on the local -z-axis
  - DOWN: move backward on the local -z-axis
  - LEFT: move leftward on the local x-axis
  - RIGHT: move rightward on the local x-axis
  - HOME: move upward on the local y-axis
  - END: move downward on the local y-axis
- rotation
  - W: rotate upward around the local x-axis
  - D: rotate rightward around the local y-axis
  - A: rotate leftward around the local y-axis
  - S: rotate downward around the local x-axis