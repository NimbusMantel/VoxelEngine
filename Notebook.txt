Voxel buffer management on the CPU
- Bitmask for each block of voxel children (8*4*4=128 bytes)
- Storage in binary tree 32-bit array
- Path computation: current level is the least significant bit, on left shift per level
- Binary index in the array: ((path | (1 << level)) - 1) or (path + (2^maxLevel >> (maxLevel-level)))
- Binary index to array index: (index >> 3)
- Binary index to bit index: (index & 7)

- maxLevel=23 -> ~2MB voxel buffer management -> ~1GB CPU voxel buffer, ~1GB GPU voxel buffer -> ~1000m^3 voxel data at its lowest level

Voxel buffer on CPU and GPU are synchronized

Voxel strucuture on the GPU
- 32-bit structure: 1-active, 3-index, 4-parent, 8-children, 7-activity, 1-emitter, (8-unused)
- 32-bit children: 32-pointer (absolute, refer to the block of voxel data (4*4=16 bytes))
- 64 bit colour: 4-mred, 4-mgreen, 4-mblue, 4-beta,
                 4-l0red, 4-l0green, 4-l0blue,
                 4-l1red, 4-l1green, 4-l1blue,
                 4-l2red, 4-l2green, 4-l2blue,
                 4-l3red, 4-l3green, 4-l3blue

Voxel structure on the CPU
- 32-bit structure: 1-active, 3-index, 4-parent, 8-children, (16-unused)
- 32-bit children: 32-pointer (absolute, refer to the block of voxel data (4*4=16 bytes))
- 32 bit unused: (32-unused)
- 32 bit unused: (32-unused)

Voxel buffer dynamics
- Loading of voxels in order (root -> recursion on children) by requests from the GPU and CPU
- Unloading by suggestions from the GPU checked by the CPU

GPU unloading suggestions
- 6-bit last usage counter (reset every frame for the active voxels)
- 1-bit unused children (toggled once lowest level has been visited -> check with siblings -> recursion to parent)
- memory pressure level calculated by the CPU (default to 127, maximum at 1)
- unused voxels with fallow period >= memory pressure is suggested to the CPU for unloading
- suggestions for blocks to unload given to the CPU via a buffer (atomic array list)

CPU unloading checks
- calculation of the current memory pressure via the amount of memory needs to be inserted and how much space is left
- only unloading of voxel data which isn't in very close proximity to the player (but not in full detail) or needed for physics

Voxel material colour on the GPU
- "A physically Based Colour Model" by Robert J Oddy, Philip J Willis:
  ratio of particle and medium colour defined by beta value
- beta value bit distribution: 0-1(0), 2-5(1), 6-9(2), 10-13(3), 14-15(4)
- colours premultiplied by ((2 ^ (bits + 1)) - 1)
- colours reapproximated by multiplication by (beta / ((2 ^ (bits + 1)) - 1))

Voxel baked lighting on the GPU
- inner light: stored in l0
- six adjacent lights: three stored in sibling voxels and l1 to l3
- emitter voxel: unshaded, front light discarded for (1, 1, 1)

Pixel calculation
- Init: RGBpixel = (0, 0, 0); RGBback = (1, 1, 1); RGBlight = (0, 0, 0); buf;
- Input: RGBparticle, beta, RGBmedium, RGBlfore, RGBlback
- Algorithm: buf = (beta * RGBparticle * RGBlfore) + RGBlight
             RGBpixel += RGBback * buf * beta / max(buf.r, buf.g, buf.b, beta);
             RGBback *= (1 - beta) * RGBmedium;
             RGBlight = 8 * sqrt(RGBlback);
