Voxel buffer management on the CPU
- Bitmask for each block of voxel children (8*4*4=128 bytes)
- Storage in binary tree 32-bit array
- Path computation: current level is the least significant bit, on left shift per level
- Binary index in the array: ((path | (1 << level)) - 1) or (path + (2^maxLevel >> (maxLevel-level)))
- Binary index to array index: (index >> 3)
- Binary index to bit index: (index & 7)

- maxLevel=23 -> ~2MB voxel buffer management -> ~1GB CPU voxel buffer, ~1GB GPU voxel buffer -> ~1000m^3 voxel data at its lowest level

Voxel buffer on CPU and GPU are synchronized

Voxel strucuture on the GPU
- 32-bit structure: 1-active, 3-index, 4-parent, 8-children, 1-search, 7-activity, 1-emitter, (7-unused)
- 32-bit children: 32-pointer (absolute, refer to the block of voxel data (4*4=16 bytes))
- 64 bit colour: 4-mred, 4-mgreen, 4-mblue, 4-beta,
                 4-l0red, 4-l0green, 4-l0blue,
                 4-l1red, 4-l1green, 4-l1blue,
                 4-l2red, 4-l2green, 4-l2blue,
                 4-l3red, 4-l3green, 4-l3blue

Voxel structure on the CPU
- 32-bit structure: 1-active, 3-index, 4-parent, 8-children, (16-unused)
- 32-bit children: 32-pointer (absolute, refer to the block of voxel data (4*4=16 bytes))
- 32 bit unused: (32-unused)
- 32 bit unused: (32-unused)

Voxel buffer dynamics
- Loading of voxels in order (root -> recursion on children) by requests from the GPU and CPU
- Unloading by suggestions from the GPU checked by the CPU

GPU loading suggestions
- set children mask but unset first child pointer represent unloaded children
- 7-bit last render timestamp (time - voxel)
- 1-bit search flag
  - update to 0 by childless leaf voxel
  - binary OR recursive parent update
  - binary search from the root for voxels to load or unload
  - reset to 1 at the end of the frame
- memory pressure level calculated by the CPU (default to 127, maximum at 1)
- unused voxels with fallow period >= memory pressure is suggested to the CPU for unloading

CPU unloading checks
- calculation of the current memory pressure via the amount of memory needs to be inserted and how much space is left
- only unloading of voxel data which isn't in very close proximity to the player (but not in full detail) or needed for physics

Voxel material colour on the GPU
- "A physically Based Colour Model" by Robert J Oddy, Philip J Willis:
  ratio of particle and medium colour defined by beta value
- beta value bit distribution: 0-1(0), 2-4(1), 5-10(2), 11-13(3), 14-15(4)
- colours premultiplied by ((2 ^ (bits + 1)) - 1)
- colours reapproximated by multiplication by (beta / ((2 ^ (bits + 1)) - 1))

Voxel baked lighting on the GPU

- inner light: stored in l0
- six adjacent lights: three stored in sibling voxels and l1 to l3
- emitter voxel: unshaded, front light discarded for (1, 1, 1)

Pixel calculation
- Init: RGBpixel = (0, 0, 0); RGBback = (1, 1, 1); RGBlight = (0, 0, 0); buf;
- Input: RGBparticle, beta, RGBmedium, RGBlfore, RGBlback
- Algorithm: buf = (beta * RGBparticle * RGBlfore) + RGBlight
             RGBpixel += RGBback * buf * beta / max(buf.r, buf.g, buf.b, beta);
             RGBback *= (1 - beta) * RGBmedium;
             RGBlight = 8 * sqrt(RGBlback);

CPU to GPU communication
- 24 bit indices
- header
  - [s] [a] [o, n, sp]* [o, n, ap]*
  - amounts of synchronous and asynchronous instructions
  - instruction codes and numbers of calls of, pointers to synchronous instructions
  - instruction codes and numbers of subcalls of, pointers to asynchronous instructions
- instructions
  - RLD [parent, index, children]*: load children -> pointer(p)
  - ULD [parent]*: unload children -> pointer(p)
  - ADD [parent, mask, voxels]*: add children -> children(p)
  - REM [parent, mask]*: remove children -> children(p), poss. pointer(p)
  - MOV [fparent, fidx, tparent, tidx]*: move voxel -> children(op), parent(v), children(np), parent(c)
  - EXP [parent, index]*: expand parent -> pointer(p)
  - EMI [index, switch]*: update emitter -> emitter(v)
  - COL [index, colour]*: update colour -> colour(v)
  - LIT [index, lights]*: update lights -> lights(v)

GPU to CPU communication
- 16 bit indices
- header
  - [a] [o, n, ap]*
  - amount of asynchronous instructions
  - instruction codes and numbers of subcalls of, pointers to asynchronous instructions
- instructions
  - REQ [parent]*: request children loadign
  - SUG [parent]*: suggest children unloading

New voxel material and lighting proposal
- 32-bit structure: 1-active, 3-index, 4-parent, 8-children, 1-search, 7-activity, (8-unused)
- 48 bit colour: 6-pred, 6-pgreen, 6-pblue, 6-beta,
                 5-mred, 5-pgreen, 5pblue, 1-emitter
- 24 bit light source: 6-sreds, 6-sgreens, 6-sblues, 6-shighlights
- lookup table for colour values: 5-cubes, 3-sides
- light source stores
  - average light value: 255 * cubes / 27 * (2 * sides + highlights) / (3 * sides)
  - side dependent variations
    - WORK IN PROGRESS
- front light: previous inner light / (1, 1, 1) for emitter voxels
- back light: next inner light
- EMI command removed, COL contains emitter flag, LIT refers to the light source