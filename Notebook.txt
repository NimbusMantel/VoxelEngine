Voxel Engine Notebook
---------------------

Voxel buffer management on the CPU
- Bitmask for each block of voxel children (8*4*4=128 bytes)
- Storage in binary tree 32-bit array
- Path computation: current level is the least significant bit, on left shift per level
- Binary index in the array: ((path | (1 << level)) - 1) or (path + (2^maxLevel >> (maxLevel-level)))
- Binary index to array index: (index >> 3)
- Binary index to bit index: (index & 7)

- maxLevel=23 -> ~2MB voxel buffer management -> ~1GB CPU voxel buffer, ~1GB GPU voxel buffer -> ~1000m^3 voxel data at its lowest level

Voxel buffer on CPU and GPU are synchronized

Voxel strucuture on the GPU
- 32-bit structure: 1-active, 3-index,
                    4-depth (child 0) / 4-parent (children 1-7),
					8-children, 6-time, (10-unused)
- 32-bit children: 32-pointer (absolute, refer to the block of voxel data (4*4=16 bytes))
- 40-bit colour: 6-pred, 6-pgreen, 6-pblue, 6-beta,
                 5-mred, 5-mgreen, 5-mblue, 1-emitter
- 18-bit light: 6-sred, 6-sgreen, 6-sblue
- 06-bit modifier: 6-shigh | (6-unused)

Voxel structure on the CPU
- 32-bit structure: 1-active, 3-index,
                    4-depth (child 0) / 4-parent (children 1-7),
					8-children, 6-position, (10-unused)
- 32-bit children: 32-pointer (absolute, refer to the block of voxel data (4*4=16 bytes))
- 32 bit unused: (32-unused)
- 32 bit unused: (32-unused)

Voxel buffer dynamics
- Loading of voxels in order (root -> recursion on children) by requests from the GPU and CPU
- Unloading by suggestions from the GPU checked by the CPU

GPU loading suggestions
- set children mask but unset first child pointer represent unloaded children
- 7-bit last render timestamp (time - voxel)
- 1-bit search flag
  - update to 0 by childless leaf voxel
  - binary OR recursive parent update
  - binary search from the root for voxels to load or unload
  - reset to 1 at the end of the frame
- memory pressure level calculated by the CPU (default to 127, maximum at 1)
- unused voxels with fallow period >= memory pressure is suggested to the CPU for unloading

CPU unloading checks
- calculation of the current memory pressure via the amount of memory needs to be inserted and how much space is left
- only unloading of voxel data which isn't in very close proximity to the player (but not in full detail) or needed for physics

Voxel material on the GPU
- Voxel material colour system
  - "A physically Based Colour Model" by Robert J Oddy, Philip J Willis
  - ratio of particle and medium colour defined by beta value
- Voxel baked lighting system
  - light memory stores
    - averaged inner light in transparten voxels
	- side dependent light modifications in solid voxels
	  - 1-red, 1-green, 1-blue, 1-high
	  - (r | g | b | h) == 0x00: no modification
	  - (r | g | b) == 0x00: light adjusted 50% towards (0, 0, 0)
	  - h = 0: light adjusted 50% towards (r, g, b)
	  - h = 1: light adjusted 75% towards (r, g, b)
  - front light
    - (1, 1, 1) for current emitter voxel
	- squared average of previous voxel's light and inner light for current transparent voxel
	- corrected previous voxel's light for current solid voxels
  - back light (clamped)
    - 1/3 next voxel's light
	  - (1, 1, 1) for previous emitter voxel
	  - squared average of previous voxel's light and inner light for current transparent voxel
	  - corrected previous voxel's light for current emitter voxel
	  - previous voxel's light / sqrt(2) for current solid voxel
	- 3/3 visualisation of voxels rendered behind

CPU to GPU communication
- 24 bit indices
- header
  - [s] [a] [o, n, sp]* [o, n, ap]*
  - amounts of synchronous and asynchronous instructions
  - instruction codes and numbers of calls of, pointers to synchronous instructions
  - instruction codes and numbers of subcalls of, pointers to asynchronous instructions
- instructions
  - RLD [parent, index, children]*: load children -> pointer(p)
  - ULD [parent]*: unload children -> pointer(p)
  - ADD [parent, children]*: add children -> children(p) (first voxel must be valid)
  - REM [parent, mask]*: remove children -> children(p) (only called for the topmost parent)
  - MOV [fparent, fidx, tparent, tidx]*: move voxel -> children(op), index(v), parent(v), children(np), parent(c)
  - EXP [parent, index]*: expand parent -> pointer(p)
  - COL [index, colour]*: update colour -> colour(v)
  - LIT [index, light]*: update light -> light(v)

GPU to CPU communication
- 24 bit indices
- header
  - [a] [s] [o, n, ap]*
  - amount of asynchronous instructions
  - buffer size in bytes
  - instruction codes and numbers of subcalls of, pointers to asynchronous instructions
- instructions
  - REQ [parent]*: request children loadign
  - SUG [parent]*: suggest children unloading

Voxel Engine controls
- program
  - ESC: exit fullscreen mode, end the program
  - F: enter and exit fullscreen mode
- camera
  - C: switch between trackball and free camera mode
    - rotate the camera via mouse movement in free mode
    - rotate the camera via mouse dragging in trackball mode
- movement
  - UP: move forward on the local -z-axis
  - DOWN: move backward on the local -z-axis
  - LEFT: move leftward on the local x-axis
  - RIGHT: move rightward on the local x-axis
  - HOME: move upward on the local y-axis
  - END: move downward on the local y-axis
- rotation
  - W: rotate upward around the local x-axis
  - D: rotate rightward around the local y-axis
  - A: rotate leftward around the local y-axis
  - S: rotate downward around the local x-axis