#pragma once

#include <cstdint>
#include <memory>

typedef bool uint1_t;

struct INS_CTG { static const uint8_t NUM = 9; static const uint8_t* ALL; virtual const uint8_t OPC() = 0; virtual const uint8_t SIZ() = 0; virtual const uint8_t PRI() = 0; virtual void WRI(uint8_t* buf) = 0; bool syn = false; };

struct INS_CTG_RLD : public INS_CTG { virtual inline const uint8_t OPC() { return opc; }; virtual inline const uint8_t SIZ() { return siz; }; virtual inline const uint8_t PRI() { return pri; }; virtual void WRI(uint8_t* buf); static const uint8_t opc; static const uint32_t siz; static const uint8_t pri; uint32_t parent; uint32_t index; std::unique_ptr<uint32_t[]> children; INS_CTG_RLD(uint32_t p, uint32_t i, std::unique_ptr<uint32_t[]> c) : parent(p), index(i), children(std::move(c)) {} };
struct INS_CTG_ULD : public INS_CTG { virtual inline const uint8_t OPC() { return opc; }; virtual inline const uint8_t SIZ() { return siz; }; virtual inline const uint8_t PRI() { return pri; }; virtual void WRI(uint8_t* buf); static const uint8_t opc; static const uint32_t siz; static const uint8_t pri; uint32_t parent; INS_CTG_ULD(uint32_t p) : parent(p) {} };
struct INS_CTG_ADD : public INS_CTG { virtual inline const uint8_t OPC() { return opc; }; virtual inline const uint8_t SIZ() { return siz; }; virtual inline const uint8_t PRI() { return pri; }; virtual void WRI(uint8_t* buf); static const uint8_t opc; static const uint32_t siz; static const uint8_t pri; uint32_t parent; uint8_t mask; std::unique_ptr<uint32_t[]> children; INS_CTG_ADD(uint32_t p, uint8_t m, std::unique_ptr<uint32_t[]> c) : parent(p), mask(m), children(std::move(c)) {} };
struct INS_CTG_REM : public INS_CTG { virtual inline const uint8_t OPC() { return opc; }; virtual inline const uint8_t SIZ() { return siz; }; virtual inline const uint8_t PRI() { return pri; }; virtual void WRI(uint8_t* buf); static const uint8_t opc; static const uint32_t siz; static const uint8_t pri; uint32_t parent; uint8_t mask; INS_CTG_REM(uint32_t p, uint8_t m) : parent(p), mask(m) {} };
struct INS_CTG_MOV : public INS_CTG { virtual inline const uint8_t OPC() { return opc; }; virtual inline const uint8_t SIZ() { return siz; }; virtual inline const uint8_t PRI() { return pri; }; virtual void WRI(uint8_t* buf); static const uint8_t opc; static const uint32_t siz; static const uint8_t pri; uint32_t fparent; uint8_t fidx; uint32_t tparent; uint8_t tidx; INS_CTG_MOV(uint32_t fp, uint8_t fi, uint32_t tp, uint8_t ti) : fparent(fp), fidx(fi), tparent(tp), tidx(ti) {} };
struct INS_CTG_EXP : public INS_CTG { virtual inline const uint8_t OPC() { return opc; }; virtual inline const uint8_t SIZ() { return siz; }; virtual inline const uint8_t PRI() { return pri; }; virtual void WRI(uint8_t* buf); static const uint8_t opc; static const uint32_t siz; static const uint8_t pri; uint32_t parent; uint32_t index; INS_CTG_EXP(uint32_t p, uint32_t i) : parent(p), index(i) {} };
struct INS_CTG_EMI : public INS_CTG { virtual inline const uint8_t OPC() { return opc; }; virtual inline const uint8_t SIZ() { return siz; }; virtual inline const uint8_t PRI() { return pri; }; virtual void WRI(uint8_t* buf); static const uint8_t opc; static const uint32_t siz; static const uint8_t pri; uint32_t index; uint1_t emitter; INS_CTG_EMI(uint32_t i, uint1_t e) : index(i), emitter(e) {} };
struct INS_CTG_COL : public INS_CTG { virtual inline const uint8_t OPC() { return opc; }; virtual inline const uint8_t SIZ() { return siz; }; virtual inline const uint8_t PRI() { return pri; }; virtual void WRI(uint8_t* buf); static const uint8_t opc; static const uint32_t siz; static const uint8_t pri; uint32_t index; uint16_t colour; INS_CTG_COL(uint32_t i, uint16_t c) : index(i), colour(c) {} };
struct INS_CTG_LIT : public INS_CTG { virtual inline const uint8_t OPC() { return opc; }; virtual inline const uint8_t SIZ() { return siz; }; virtual inline const uint8_t PRI() { return pri; }; virtual void WRI(uint8_t* buf); static const uint8_t opc; static const uint32_t siz; static const uint8_t pri; uint32_t index; std::unique_ptr<uint16_t[]> lights; INS_CTG_LIT(uint32_t i, std::unique_ptr<uint16_t[]> l) : index(i), lights(std::move(l)) {} };