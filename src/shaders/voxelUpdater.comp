#version 460 core

#extension GL_KHR_vulkan_glsl : enable

#extension GL_ARB_separate_shader_objects : require

#extension GL_ARB_shader_ballot : require //uint readInvocationARB(uint value, uint invocationIndex)
#extension GL_ARB_shader_group_vote : require //bool anyInvocationARB(bool value)

layout(local_size_x = 32) in;

layout(binding = 0) buffer restrict UpdateData {
    uint[] data;
} update;

layout(binding = 1, r32ui) uniform restrict writeonly uimage3D structure;
layout(binding = 2, rgba32ui) uniform restrict writeonly uimage3D material;

layout(binding = 3) buffer restrict writeonly InvocationQuery {
	uint subGroupSize;
} invocation;

layout(push_constant) uniform Constants {
    uint subGroupSize;
} constants;

#define VOX_STRUCTURE(children, mask) uint((uint(!bool(children)) << 31) | ((children & 0x001FFFFF) << 8) | (mask & 0xFF))
#define VOX_EMPTY 0x00

const uint testData[136] = uint[136](
    VOX_STRUCTURE(1, 0x01), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY,
	VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_STRUCTURE(2, 0x80),
	VOX_STRUCTURE(3, 0x80), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY,
	VOX_STRUCTURE(4, 0x80), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY,
	VOX_STRUCTURE(5, 0x80), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY,
	VOX_STRUCTURE(6, 0x80), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY,
	VOX_STRUCTURE(7, 0x80), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY,
	VOX_STRUCTURE(8, 0x80), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY,
	VOX_STRUCTURE(9, 0x80), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY,
	VOX_STRUCTURE(10, 0x80), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY,
	VOX_STRUCTURE(11, 0x80), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY,
	VOX_STRUCTURE(12, 0x80), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY,
	VOX_STRUCTURE(13, 0x80), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY,
	VOX_STRUCTURE(14, 0x80), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY,
	VOX_STRUCTURE(15, 0x80), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY,
	VOX_STRUCTURE(16, 0x80), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY,
	VOX_STRUCTURE(0x0, 0x0), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY
);

void main() {
	invocation.subGroupSize = gl_SubGroupSizeARB;

    ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);

    for (uint x = gl_GlobalInvocationID.x; x < 17; x += gl_WorkGroupSize.x) {
        uint idx = x << 3;

        ivec3 pos = ivec3(x << 1, x >> 6, x >> 13) & 0xFE;

        imageStore(structure, pos + ivec3(0, 0, 0), uvec4(testData[idx + 0], 0, 0, 0));
        imageStore(structure, pos + ivec3(1, 0, 0), uvec4(testData[idx + 1], 0, 0, 0));
        imageStore(structure, pos + ivec3(0, 1, 0), uvec4(testData[idx + 2], 0, 0, 0));
        imageStore(structure, pos + ivec3(1, 1, 0), uvec4(testData[idx + 3], 0, 0, 0));
        imageStore(structure, pos + ivec3(0, 0, 1), uvec4(testData[idx + 4], 0, 0, 0));
        imageStore(structure, pos + ivec3(1, 0, 1), uvec4(testData[idx + 5], 0, 0, 0));
        imageStore(structure, pos + ivec3(0, 1, 1), uvec4(testData[idx + 6], 0, 0, 0));
        imageStore(structure, pos + ivec3(1, 1, 1), uvec4(testData[idx + 7], 0, 0, 0));
    }
}