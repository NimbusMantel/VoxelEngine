#version 460 core

#extension GL_KHR_vulkan_glsl : enable

#extension GL_ARB_separate_shader_objects : require

#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_KHR_shader_subgroup_vote : require

layout(local_size_x = 32) in;

layout(binding = 0) buffer restrict UpdateData {
    uint[] data;
} update;

layout(binding = 1, r32ui) uniform restrict writeonly uimage3D structure;
layout(binding = 2, rgba32ui) uniform restrict writeonly uimage3D material;

layout(binding = 3) buffer restrict UpdateQueue {
    uint offset;
} queue;

const uint operationSizes[16] = uint[16](
	0,                         // BUF_END
	1 + (3 + 8 * 1),           // STR_CLD_M
	1 + (3 + 8 * 3),           // VOX_CPY_M
	1 + (3 + 3) * 8,           // VOX_CPY_S
	1 + (3 + 8 * (3 + 1)),     // STR_LOA_M
	1 + (3 + 1) * 8,           // STR_CLD_S
	1 + (3 + 3) * 8,           // STR_PNT_S
	1 + (3 + (3 + 1)) * 8,     // STR_LOA_S
	1 + (3 + 8 * (8 + 4 + 4)), // MAT_LOA_M
	1 + (3 + 4) * 8,           // MAT_xxL_S
	1 + (3 + 4) * 8,           // MAT_xSx_S
	1 + (3 + (4 + 4)) * 8,     // MAT_xSL_S
	1 + (3 + 8) * 8,           // MAT_Cxx_S
	1 + (3 + (8 + 4)) * 8,     // MAT_CxL_S
	1 + (3 + (8 + 4)) * 8,     // MAT_CSx_S
	1 + (3 + (8 + 4 + 4)) * 8  // MAT_LOA_S
);

#define VOX_STRUCTURE(children, mask) uint((uint(!bool(children)) << 31) | ((children & 0x001FFFFF) << 8) | (mask & 0xFF))
#define VOX_EMPTY 0x00

const uint testData[136] = uint[136](
    VOX_STRUCTURE(1, 0x01), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY,
	VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_STRUCTURE(2, 0x80),
	VOX_STRUCTURE(3, 0x80), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY,
	VOX_STRUCTURE(4, 0x80), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY,
	VOX_STRUCTURE(5, 0x80), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY,
	VOX_STRUCTURE(6, 0x80), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY,
	VOX_STRUCTURE(7, 0x80), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY,
	VOX_STRUCTURE(8, 0x80), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY,
	VOX_STRUCTURE(9, 0x80), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY,
	VOX_STRUCTURE(10, 0x80), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY,
	VOX_STRUCTURE(11, 0x80), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY,
	VOX_STRUCTURE(12, 0x80), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY,
	VOX_STRUCTURE(13, 0x80), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY,
	VOX_STRUCTURE(14, 0x80), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY,
	VOX_STRUCTURE(15, 0x80), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY,
	VOX_STRUCTURE(16, 0x80), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY,
	VOX_STRUCTURE(0x0, 0x0), VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY, VOX_EMPTY
);

void main() {
	queue.offset = 0;
    barrier();

	uint begin = 0;

	if (subgroupElect()) {
		uint expect;

		do {
			expect = begin;
			begin = atomicCompSwap(queue.offset, expect, expect + operationSizes[update.data[expect]] * (gl_SubgroupSize >> 3));
		} while (begin != expect);
	}

	begin = subgroupBroadcastFirst(begin);

	ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);

    for (uint x = gl_GlobalInvocationID.x; x < 17; x += gl_WorkGroupSize.x) {
        uint idx = x << 3;

        ivec3 pos = ivec3(x << 1, x >> 6, x >> 13) & 0xFE;

        imageStore(structure, pos + ivec3(0, 0, 0), uvec4(testData[idx + 0], 0, 0, 0));
        imageStore(structure, pos + ivec3(1, 0, 0), uvec4(testData[idx + 1], 0, 0, 0));
        imageStore(structure, pos + ivec3(0, 1, 0), uvec4(testData[idx + 2], 0, 0, 0));
        imageStore(structure, pos + ivec3(1, 1, 0), uvec4(testData[idx + 3], 0, 0, 0));
        imageStore(structure, pos + ivec3(0, 0, 1), uvec4(testData[idx + 4], 0, 0, 0));
        imageStore(structure, pos + ivec3(1, 0, 1), uvec4(testData[idx + 5], 0, 0, 0));
        imageStore(structure, pos + ivec3(0, 1, 1), uvec4(testData[idx + 6], 0, 0, 0));
        imageStore(structure, pos + ivec3(1, 1, 1), uvec4(testData[idx + 7], 0, 0, 0));
    }
}