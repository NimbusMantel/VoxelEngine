#version 460 core

#extension GL_KHR_vulkan_glsl : enable

#extension GL_ARB_separate_shader_objects : require

#define GammaInv 0.454545f

layout(local_size_x = 32, local_size_y = 32) in;

layout(binding = 0, rgba16f) uniform restrict readonly imageBuffer hdrImage;

layout(binding = 1, rgba8_snorm) uniform restrict writeonly image2D ldrImage;

void main() {
    const uvec2 size = imageSize(ldrImage);
    const uvec2 center = size >> 1;
    
    ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);

    for (uint y = gl_GlobalInvocationID.y; y < size.y; y += gl_WorkGroupSize.y) {
        uint base = y * size.x;

        for (uint x = gl_GlobalInvocationID.x; x < size.x; x += gl_WorkGroupSize.x) {
            vec4 pixel = imageLoad(hdrImage, int(base + x));

            /*pixel.w = 0.299 * pixel.x + 0.587 * pixel.y + 0.114 * pixel.z;

            pixel.xyz *= (pixel.w / ((1.0f + pixel.w) * pixel.w)); // Median luminance still missing

            pixel = vec4(pow(clamp(pixel.xyz, 0.0f, 1.0f), vec3(GammaInv)), 1.0f);*/

            if (x >= (center.x - 5) && x <= (center.x + 4) && y >= (center.y - 1) && y <= center.y) {
                pixel = vec4(float(pixel.x < 0.5f), float(pixel.y < 0.5f), float(pixel.z < 0.5f), 1.0f);
            }
            else if (y >= (center.y - 5) && y <= (center.y + 4) && x >= (center.x - 1) && x <= center.x) {
                pixel = vec4(float(pixel.x < 0.5f), float(pixel.y < 0.5f), float(pixel.z < 0.5f), 1.0f);
            }

            imageStore(ldrImage, ivec2(x, y), pixel);
        }
    }
}