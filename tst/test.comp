#version 460 core

#extension GL_KHR_vulkan_glsl : enable

#extension GL_ARB_separate_shader_objects : require

#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_shuffle : require
#extension GL_KHR_shader_subgroup_arithmetic : require
#extension GL_KHR_shader_subgroup_clustered : require
#extension GL_KHR_shader_subgroup_shuffle_relative : require

layout(local_size_x = 32, local_size_y = 32) in;

#define RAY_LEN 8U
#define RAY_MOD 7U

void main() {
    const uint clusterID = gl_SubgroupInvocationID & RAY_MOD;

    /* INPUTS */
    precise vec3 x0, off;
    uint sca;

    precise vec3 x0_inv = 1.0 / x0;
    precise float x0_dot_inv = 1.0 / dot(x0, vec3(1.0));
    precise float off_max = max(max(off.x, off.y), off.z);

    precise vec3 v0 = fma(-off, x0_inv, round(fma(x0, vec3((fma(clusterID, 3.0, 1.0) - off_max) * x0_dot_inv), off)));
    precise vec3 v1 = fma(-off, x0_inv, round(fma(x0, vec3((fma(clusterID, 3.0, 2.0) - off_max) * x0_dot_inv), off)));
    precise vec3 v2 = fma(-off, x0_inv, round(fma(x0, vec3((fma(clusterID, 3.0, 3.0) - off_max) * x0_dot_inv), off)));

    precise float d0 = max(max(v0.x, v0.y), v0.z);
    precise float d1 = max(max(v1.x, v1.y), v1.z);
    precise float d2 = max(max(v2.x, v2.y), v2.z);

    v0 = uintBitsToFloat((floatBitsToUint(fma(x0, vec3(d0), off)) >> sca) << sca);
    v1 = uintBitsToFloat((floatBitsToUint(fma(x0, vec3(d1), off)) >> sca) << sca);
    v2 = uintBitsToFloat((floatBitsToUint(fma(x0, vec3(d2), off)) >> sca) << sca);

    bool u0 = (subgroupShuffle(v0, (clusterID + RAY_MOD) & RAY_MOD) != v0);
    bool u1 = (v0 != v1);
    bool u2 = (v1 != v2);

    uint o = subgroupInclusiveAdd(uint(u0) + uint(u1) + uint(u2));
    o -= subgroupShuffle(o, gl_SubgroupInvocationID - RAY_MOD);

    uvec4 res[2];

    res[o & 1U][o >> 1U] = (u0 && o < RAY_MOD) ? floatBitsToUint(d0) : res[o & 1U][o >> 1U];
    o += uint(u0);
    res[o & 1U][o >> 1U] = (u1 && o < RAY_MOD) ? floatBitsToUint(d1) : res[o & 1U][o >> 1U];
    o += uint(u1);
    res[o & 1U][o >> 1U] = (u2 && o < RAY_MOD) ? floatBitsToUint(d2) : res[o & 1U][o >> 1U];

    res[0] = subgroupClusteredOr(res[0], RAY_LEN);
    res[1] = subgroupClusteredOr(res[1], RAY_LEN);

    /* OUTPUTS */
    precise vec3 vxt = uintBitsToFloat((floatBitsToUint(fma(x0, vec3(uintBitsToFloat(res[clusterID >> 1U][clusterID & 1U])), off)) >> sca) << sca);
    precise vec3 vxf = (clusterID == 0) ? off : subgroupShuffleUp(vxt, 1U);
}