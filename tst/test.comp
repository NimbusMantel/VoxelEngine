#version 460 core

#extension GL_KHR_vulkan_glsl : enable

#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_shuffle : require
#extension GL_KHR_shader_subgroup_arithmetic : require
#extension GL_ARB_gpu_shader_int64 : require
#extension GL_KHR_shader_subgroup_clustered : require

void/*precise vec3*/ main/*subgroupOctVoxelIntersections*/(/*const vec3 d0, const vec3 i0, const uint sca*/) {
    const uint cid = gl_SubgroupInvocationID & 7U;

    vec3 d0;
    vec3 i0;
    uint sca;

    precise const vec3 d0_inv = 1.0 / d0;

    precise const vec3 i0_off = (i0 - uintBitsToFloat((floatBitsToUint(i0) >> sca) << sca)) * d0_inv;
    precise const float i0_off_max = min(min(i0_off.x, i0_off.y), i0_off.z);

    precise const float d0_dot_inv = pow(2.0, 23 - sca) / dot(d0, vec3(1.0));

    precise const vec3 gs = (vec3(fma(cid, 3.0, -i0_off_max)) + vec3(1.0, 2.0, 3.0)) * d0_dot_inv;

    precise const vec3 s0 = floatBitsToUint(fma(d0, gs.xxx, i0)) >> sca;
    precise const vec3 s1 = floatBitsToUint(fma(d0, gs.yyy, i0)) >> sca;
    precise const vec3 s2 = floatBitsToUint(fma(d0, gs.zzz, i0)) >> sca;

    const bool u0 = (subgroupShuffle(s2, (cid + 7U) & 7U) != s0);
    const bool u1 = (s0 != s1);
    const bool u2 = (s1 != s2);

    uint o = subgroupInclusiveAdd(uint(u0) + uint(u1) + uint(u2));
    o -= subgroupShuffle(o, gl_SubgroupInvocationID - cid);
    o <<= 3U;

    uint64_t acc = 0U;

    acc |= (u0 && o < 64U) ? (uint64_t(fma(cid, 3.0, 1.0)) << o) : 0U;
    o += uint(u0) * 8;
    acc |= (u1 && o < 64U) ? (uint64_t(fma(cid, 3.0, 2.0)) << o) : 0U;
    o += uint(u0) * 8;
    acc |= (u2 && o < 64U) ? (uint64_t(fma(cid, 3.0, 3.0)) << o) : 0U;

    acc = packUint2x32(subgroupClusteredOr(unpackUint2x32(acc), 8U));

    acc = (acc >> (cid << 3U)) & 0xFF;

    precise const vec3 sx = uintBitsToFloat((floatBitsToUint(fma(d0, vec3((float(acc) - i0_off_max) * d0_dot_inv), i0)) >> sca) << sca);
    precise const vec3 tx = (sx - i0) * d0_inv;
    precise const float c = min(min(tx.x, tx.y), tx.z);
    precise const vec3 px = fma(d0, vec3(c), i0);
    precise const vec3 ix/*return*/ = mix(clamp(px, sx, sx + pow(0.5, 23 - sca)), sx, equal(tx, vec3(c)));
}