#version 460 core

#extension GL_KHR_vulkan_glsl : enable

#extension GL_ARB_separate_shader_objects : require

#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_shuffle : require
#extension GL_KHR_shader_subgroup_arithmetic : require
#extension GL_KHR_shader_subgroup_clustered : require
#extension GL_KHR_shader_subgroup_shuffle_relative : require

void subgroupOctRayIntersectUnits(in const vec3 a, in const vec3 d0, out precise vec3 i0, out precise vec3 i1) {
    const uint cid = gl_SubgroupInvocationID & 7U;

    precise const vec3 d0_inv = 1.0 / d0;
    precise const float d0_dot_inv = 1.0 / dot(d0, vec3(1.0));
    precise const float a_max = max(max(a.x, a.y), a.z);

    precise vec3 v0 = fma(-a, d0_inv, round(fma(d0, vec3((fma(cid, 3.0, 1.0) - a_max) * d0_dot_inv), a)));
    precise vec3 v1 = fma(-a, d0_inv, round(fma(d0, vec3((fma(cid, 3.0, 2.0) - a_max) * d0_dot_inv), a)));
    precise vec3 v2 = fma(-a, d0_inv, round(fma(d0, vec3((fma(cid, 3.0, 3.0) - a_max) * d0_dot_inv), a)));

    precise const float t0 = max(max(v0.x, v0.y), v0.z);
    precise const float t1 = max(max(v1.x, v1.y), v1.z);
    precise const float t2 = max(max(v2.x, v2.y), v2.z);

    v0 = floor(fma(d0, vec3(t0), a));
    v1 = floor(fma(d0, vec3(t1), a));
    v2 = floor(fma(d0, vec3(t2), a));

    const bool u0 = (subgroupShuffle(v2, (cid + 7U) & 7U) != v0);
    const bool u1 = (v0 != v1);
    const bool u2 = (v1 != v2);

    uint o = subgroupInclusiveAdd(uint(u0) + uint(u1) + uint(u2));
    o -= subgroupShuffle(o, gl_SubgroupInvocationID - cid);

    uvec4 acc[2];

    acc[o & 1U][o >> 1U] = (u0 && o < 8U) ? floatBitsToUint(t0) : acc[o & 1U][o >> 1U];
    o += uint(u0);
    acc[o & 1U][o >> 1U] = (u1 && o < 8U) ? floatBitsToUint(t1) : acc[o & 1U][o >> 1U];
    o += uint(u1);
    acc[o & 1U][o >> 1U] = (u2 && o < 8U) ? floatBitsToUint(t2) : acc[o & 1U][o >> 1U];

    acc[0] = subgroupClusteredOr(acc[0], 8U);
    acc[1] = subgroupClusteredOr(acc[1], 8U);

    i1 = floor(fma(d0, vec3(uintBitsToFloat(acc[cid >> 1U][cid & 1U])), a));
    i0 = (cid == 0) ? a : subgroupShuffleUp(i1, 1U);
}